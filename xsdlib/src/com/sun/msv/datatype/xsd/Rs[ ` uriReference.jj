PARSER_BEGIN(UriReferenceParser)

package com.sun.tranquilo.datatype;

class UriReferenceParser
{
}

PARSER_END(UriReferenceParser)

TOKEN :
{
	<#digit			: ["0"-"9"] >
	<#loalpha		: ["a"-"z"] >
	<#upalpha		: ["A"-"Z"] >
	<#alpha			: <loalpha> | <upalpha> >
	<#alphanum		: <alpha> | <digit> >
	<#hex			: <digit> | ["a"-"f","A"-"F"] >
	<escaped		: "%" <hex> <hex> >
	<#mark			: "-" | "_" | "." | "!" | "~" | "*" | "'" | "(" | ")" >
	<#unreserved	: <alphanum> | <mark> >
	<#reserved		: ";" | "/" | "?" | ":" | "@" | "&" | "=" | "+" | "$" | "," >
	<#uric			: <reserved> | <unreserved> | <escaped> >
	<__uric_string	:  <uric>* >
	<#pchar			: <unreserved> | <escaped> | ":" | "@" | "&" | "=" | "+" | "$" | "," >
	<__pchar_string	: <pchar>* >
}

void uriReference() : {}
{
	( absoluteURI() | relativeURI() )  [ "#" fragment() ] <EOF>
}

void absoluteURI() : {}
{
	scheme() ":" ( hier_part() | opaque_part() )
}

void relativeURI() : {}
{
	( net_path() | abs_path() | rel_path() ) [ "?" query() ]
}

void hier_part() : {}
{
	( net_path() | abs_path() ) [ "?" query() ]
}

void opaque_part() : {}
{
	uric_no_slash() ( uric() )*
}

void uric_no_slash() : {}
{
	unreserved() | escaped() | ";" | "?" | ":" | "@" | "&" | "=" | "+" | "$" | ","
}

void net_path() : {}
{
	"//" authority() [ abs_path() ]
}

void abs_path() : {}
{
	"/" path_segments()
}

void rel_path() : {}
{
	rel_segment() [ abs_path() ]
}

void rel_segment() : {}
{
	( unreserved() | escaped() | ";" | "@" | "&" | "=" | "+" | "$" | "," )+
}

void scheme() : {}
{
	alpha() ( alpha() | digit() | "+" | "-" | "." )*
}

void authority() : {}
{
	server() | reg_name()
}

void reg_name() : {}
{
	( unreserved() | escaped() | "$" | "," | ";" | ":" | "@" | "&" | "=" | "+" )+
}

void server() : {}
{
	[ [ userinfo() "@" ] hostport() ]
}

void userinfo() : {}
{
	( unreserved() | escaped() | ";" | ":" | "&" | "=" | "+" | "$" | "," )*
}

void hostport() : {}
{
	host() [ ":" port() ]
}

void host() : {}
{
	hostname() | IPv4address()
}

void hostname() : {}
{
	( domainlabel() "." )* toplabel() [ "." ]
}

void domainlabel() : {}
{
	alphanum() | alphanum() ( alphanum() | "-" )* alphanum()
}

void toplabel() : {}
{
	alpha() | alpha() ( alphanum() | "-" )* alphanum()
}

void IPv4address() : {}
{
	(digit())+ "." (digit())+ "." (digit())+ "." (digit())+
}

void port() : {}
{
	(digit())*
}

void path() : {}
{
	[ abs_path() | opaque_part() ]
}

void path_segments() : {}
{
	segment() ( "/" segment() )*
}

void segment() : {}
{
	<__pchar_string> ( ";" param() )*
}

void param() : {}
{
	<__pchar_string>
}

void query() : {}
{
	<__uric_string>
}

void fragment() : {}
{
	<__uric_string>
}
