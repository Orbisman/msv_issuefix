/*
 * @(#)$Id$
 *
 * Copyright 2001 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * This software is the proprietary information of Sun Microsystems, Inc.  
 * Use is subject to license terms.
 * 
 */
package com.sun.tranquilo.datatype;

import java.io.ByteArrayInputStream;

/**
 * "anyURI" type.
 * 
 * See http://www.w3.org/TR/xmlschema-2/#anyURI for the spec
 * 
 * @author Kohsuke KAWAGUCHI
 */
public class AnyURIType extends ConcreteType implements Discrete
{
	public static final AnyURIType theInstance = new AnyURIType();
	private AnyURIType() { super("anyURI"); }
	
	protected boolean checkFormat( String content, ValidationContextProvider context )
	{
		return convertToValue(content,context)!=null;
	}
	
	public Object convertToValue( String content, ValidationContextProvider context )
	{
		// we can't use java.net.URL (for example, it cannot handle IPv6.)
		// so use lexical value instead
		
		try
		{// make sure it conforms [RFC2396] (amended by [RFC2732])
			// parser generated by javacc reads a byte sequence, not a character sequence.
			// thus we have to somehow convert a character sequence to a byte sequence.
			
			// currently, URI only accepts US-ASCII characters (#x0-#x7F)
			// (note that this is a priority-feedback item of current draft, so
			// possibility of change is very high)
			
			// By using UTF-8, non ascii characters will have bit image of 1XXXXXXX.
			// thus these characters will be rejected by the parser as an error.
			final AnyURIParser parser =
				new AnyURIParser( new ByteArrayInputStream( content.getBytes("UTF8") ) );
			parser.start();
		}
		catch( Throwable e )
		{// JavaCC throws Error-derived classes in case of errors, so we have to catch them.
			return null;
		}
		
		return content;
	}
	

	public final int isFacetApplicable( String facetName )
	{
		if( facetName.equals(FACET_LENGTH)
		||	facetName.equals(FACET_MINLENGTH)
		||	facetName.equals(FACET_MAXLENGTH)
		||	facetName.equals(FACET_PATTERN)
		||	facetName.equals(FACET_ENUMERATION) )
			return APPLICABLE;
		else
			return NOT_ALLOWED;
	}
	
	public final int countLength( Object value )
	{
		// uriReference only allows US-ASCII characters.
		// thus we don't need to count surrogate pairs.
		return ((String)value).length();
	}
}
