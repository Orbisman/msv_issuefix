options {
	STATIC					= false;
	ERROR_REPORTING			= false;
	OPTIMIZE_TOKEN_MANAGER	= true;
	BUILD_PARSER			= true;
	LOOKAHEAD				= 3;
	FORCE_LA_CHECK			= false;
}
PARSER_BEGIN(ISO8601Parser)

package com.sun.tranquilo.datatype.datetime;

import java.io.*;
import java.math.BigDecimal;
import java.math.BigInteger;

/**
 * parses various string that conforms to ISO-8601.
 */
public class ISO8601Parser
{
	public static void main(String args[]) throws Exception
	{
		String s = new BufferedReader( new InputStreamReader(System.in) ).readLine();
		new ISO8601Parser(new ByteArrayInputStream(s.getBytes("UTF-8"))).dateTimeTypeV();
	}
	
	Number		yy,mm,dd;			// Integer or BigInteger
	Number		HH,MM;				// Integer or BigInteger
	Number		mSecond;			// Integer or BigDecimal
	TimeZone	zone;				// TimeZone
	
	private static final String[] trail = new String[]{"0000","000","00","0",""};
	
	private void reset() { yy=mm=dd=HH=MM=mSecond=null; zone=null; }
}

PARSER_END(ISO8601Parser)

/*
	no clear BNF is given for timeDuration and rucurringTime of XML Schema Part.2
	This is just my interpretation of the spec.

	Non-terminals without a leading underscore are top-level rules
	that matches respective datatype.
*/
TOKEN :
{
	<#digit			: ["0"-"9"] >
|
	<digits			: (<digit>)+ >
}

void secondL() : {}
{
	NN(0,59) [ "." <digits> ]
}

void secondV() : { int ss; Token t2=null; }
{
	ss=NN(0,59) [ "." t2=<digits> ]
	{
		if(t2==null)
		{// no fraction part
			mSecond = new Integer(ss*1000);
			return;
		}
		
		if( t2.image.length()<4 )
		{// integer is enough
			mSecond = new Integer(ss*1000 + Integer.parseInt(t2.image));
			return;
		}
		
		// we have to use BigDecimal
		mSecond = new BigDecimal( ss + "." + t2.image).movePointRight(3);
	}
}

void durationTypeL() : {}
{
	["-"] "P" 
	(
		datePartL() ["T" timePartL()]
	|
		"T" timePartL()
	)
}

ITimeDurationValueType durationTypeV() : { boolean neg=false; }
{
	["-" {neg=true;} ]
	"P"
	(
		datePartV(neg) ["T" timePartV(neg)]
	|
		"T" timePartV(neg)
	)
	<EOF>
	{
		return TimeDurationFactory.create(
			yy, mm, dd, HH, MM, mSecond );
	}
}

void datePartL() : {}
{
	[<digits> "Y"] [<digits> "M"] <digits> "D"
|
	[<digits> "Y"] <digits> "M"
|
	<digits> "Y"
}

void datePartV(boolean neg) : {}
{
	[yy=intDigits(neg) "Y"] [mm=intDigits(neg) "M"] dd=intDigits(neg) "D"
|
	[yy=intDigits(neg) "Y"] mm=intDigits(neg) "M"
|
	yy=intDigits(neg) "Y"
}


void timePartL() : {}
{
	[<digits> "H"] [<digits> "M"] <digits> ["." <digits>] "S"
|
	[<digits> "H"] <digits> "M"
|
	<digits> "H"
}

void timePartV(boolean neg) : {}
{
	[HH=intDigits(neg) "H"] [MM=intDigits(neg) "M"] decimalDigits(neg) "S"
|
	[HH=intDigits(neg) "H"] MM=intDigits(neg) "M"
|
	HH=intDigits(neg) "H"
}

Number intDigits(boolean neg) : { Token v; }
{
	v=<digits>	// non-negative value only.
	{
		try
		{// try Integer first.
			int i = Integer.parseInt(v.image);
			if(neg)	i=-i;
			return new Integer(i);
		}
		catch( NumberFormatException e )
		{// then BigInteger
			try
			{
				BigInteger bi = new BigInteger(v.image);
				if(neg)	bi = bi.negate();
				return bi;
			}
			catch( NumberFormatException ee )
			{
				throw new ParseException();
			}
		}
	}
}

void decimalDigits(boolean neg) : { Token t1,t2=null; }
{
	t1=<digits> [ "." t2=<digits> ]
	{
		String header = neg?"-":"";
		try
		{
			if(t2==null)
			{// no fraction part
				mSecond = new Integer(header + t1.image+"000");	// multiply by 1000
				return;
			}
			else
			if( t2.image.length()<4 )
			{// integer maybe enough
				mSecond = new Integer(header + t1.image + t2.image + trail[t2.image.length()] );
				return;
			}
		}
		catch(NumberFormatException e) {;}
		
		// otherwise use BigDecimal
		mSecond = new BigDecimal( t1.image + "." + t2.image).movePointRight(3);
	}
}



/** digits that is
		1) width of two
		2) within [min,max] (inclusive)
*/
int NN( int min, int max ) : { Token v; }
{
	v=<digits>
	{
		if(v.image.length()!=2)		throw new ParseException();
		int r = Integer.parseInt(v.image);
		if( r>max )		throw new ParseException();
		if( r<min )		throw new ParseException();
		return r;
	}
}

/*	Time Zone Modifier

	something like "-05:00" or "+09:00"
*/
void timeZoneModifierL() : { int h,m; }
{
	"Z"
|
	("+"|"-") h=NN(0,14) ":" m=NN(0,59)
	{
		if(h==14 && m!=0)	throw new ParseException();
	}
}

void timeZoneModifierV() :
{
	int h,m;int sign;
}
{
	"Z"
	{
		zone = TimeZone.GMT;
	}
|
	( "+" {sign=1;} | "-" {sign=-1;} )
	h=NN(0,14) ":" m=NN(0,59)
	{
		if(h==14 && m!=0)	throw new ParseException();
		zone = TimeZone.create( sign*h*m );
	}
}

void timeL() : {}
{
	NN(0,24) ":" NN(0,59) ":" secondL()
}
/* time without time zone modifier */
void timeV() : { int h,m;}
{
	h=NN(0,23) ":"		/* hour */
	m=NN(0,59) ":"		/* minute */
	secondV()			/* second */
	{
		HH = new Integer(h);
		MM = new Integer(m);
	}
}

int yearL() : { Token v; }
{// to perform leap year check, last 4 digits of the year is necessary
	("+"|"-")
	v=<digits>
	{
		final int length = v.image.length();
		if(length<4 || v.image.equals("0000") )
			throw new ParseException();
		if(length>4 && v.image.charAt(0)=='0')
			throw new ParseException();
		return Integer.parseInt(v.image.substring(length-4));
	}
}

void yearV() : { boolean neg=false; Token v; }
{
	("+"|"-"{neg=true;})?
	v=<digits>
	{/* 0000 is prohibited. must be 4 digits or more */
		final int length = v.image.length();
		if(length<4)
			// TODO : diagnosis message?
			throw new ParseException();
		if(length>4 && v.image.charAt(0)=='0' )
			// TODO : is this really a violation?
			throw new ParseException();
		
		try
		{
			int i = Integer.parseInt(v.image);
			if(i==0)	// no year 0
				throw new ParseException();
			if(neg)	i = -i+1;
			yy = new Integer(i);
		}
		catch(NumberFormatException e)
		{// Integer maybe too small for this value try it with BigInteger
			try
			{
				BigInteger bi = new BigInteger(v.image);
				// TODO : could be optimized by using not()
				if(neg)		bi = bi.negate().add(BigInteger.ONE);
				yy = bi;
			}
			catch(NumberFormatException ee)
			{
				throw new ParseException();
			}
		}
	}
}

/* month without time zone modifier */
void month() : { int m; }
{
	m = NN(1,12)
	{ mm = new Integer(m); }
}

/* day of month without time zone modifier */
void day() : { int d; }
{
	d = NN(1,31)
	{ dd = new Integer(d-1); }
}

/* date without time zone modifier */
void dateL() : { int tail4; }
{
	tail4=yearL() "-" month() "-" day()
	{
		if( dd.intValue() >= Util.maximumDayInMonthFor( tail4, mm.intValue() ) )
			throw new ParseException();	// something like 32nd,Jan 
	}
}
void dateV() : {}
{
	yearV() "-" month() "-" day()
	{
		if(
			( (yy instanceof BigInteger) &&
				dd.intValue() >= Util.maximumDayInMonthFor( (BigInteger)yy, mm.intValue() ) )
		||
			( (yy instanceof Integer) &&
				dd.intValue() >= Util.maximumDayInMonthFor( yy.intValue(), mm.intValue() ) ) )
			throw new ParseException();	// something like 32nd,Jan
	}
}

void dateTimeTypeL() : {}
{
	dateL()	"T"	timeL() [ timeZoneModifierL() ]
}

IDateTimeValueType dateTimeTypeV() : {}
{
	dateV()	"T"	timeV() [ timeZoneModifierV() ]
	
	{ return DateTimeFactory.createFromDateTime(
		yy, (Integer)mm, (Integer)dd, (Integer)HH, (Integer)MM, mSecond, zone ); }
}

IDateTimeValueType timeTypeV() : {}
{
	timeV() [ timeZoneModifierV() ]
	
	{ return DateTimeFactory.createFromTime( (Integer)HH, (Integer)MM, mSecond, zone ); }
}

IDateTimeValueType dateTypeV() : {}
{
	dateV() [ timeZoneModifierV() ]
	
	{ return DateTimeFactory.createFromDate(
		yy, (Integer)mm, (Integer)dd, zone ); }
}

IDateTimeValueType yearMonthTypeV() : {}
{
	yearV() "-" month() [ timeZoneModifierV() ]
	
	{ return DateTimeFactory.createFromDate(
		yy, (Integer)mm, null, zone ); }
}

IDateTimeValueType yearTypeV() : {}
{
	yearV() [ timeZoneModifierV() ]
	
	{ return DateTimeFactory.createFromDate( yy, null, null, zone ); }
}

IDateTimeValueType monthDayTypeV() : {}
{
	"--" month() "-" day() [ timeZoneModifierV() ]
	
	{
		if( dd.intValue() >= Util.maximumDayInMonthFor( 4, mm.intValue() ) )
			throw new ParseException();	// something like 32nd,Jan
		return DateTimeFactory.createFromDate(
			null, (Integer)mm, (Integer)dd, zone );
	}
}

IDateTimeValueType dayTypeV() : {}
{
	"---" day() [ timeZoneModifierV() ]
	
	{ return DateTimeFactory.createFromDate(
		null, null, (Integer)dd, zone ); }
}

IDateTimeValueType monthTypeV() : {}
{
	"--" month() "--" [ timeZoneModifierV() ]
	
	{ return DateTimeFactory.createFromDate( null, (Integer)mm, null, zone ); }
}
