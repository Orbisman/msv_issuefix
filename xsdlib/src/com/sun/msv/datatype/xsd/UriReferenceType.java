/*
 * Tranquilo : RELAX Verifier           written by Kohsuke Kawaguchi
 *                                           k-kawa@bigfoot.com
 *
 * Copyright 2000 Sun Microsystems, Inc. All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Sun
 * Microsystems, Inc. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Sun.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
 * THIS SOFTWARE OR ITS DERIVATIVES.
 */
package com.sun.tranquilo.datatype;

import java.io.ByteArrayInputStream;

/**
 * "uriReference" and uriReference-derived types
 * 
 * See http://www.w3.org/TR/xmlschema-2/#uriReference for the spec
 */
public class UriReferenceType extends DataTypeImpl
{
	/** singleton access to the plain string type */
	public static UriReferenceType theInstance =
		new UriReferenceType("uriReference",null,null,null);
	
	public boolean verify( String content )
	{
		// performs whitespace pre-processing
		content = WhiteSpaceProcessor.theCollapse.process(content);
		
		// checks additional facets
		if( pattern!=null && !pattern.verify(content) )		return false;
		if( lengths!=null && !lengths.verify(UnicodeUtil.countLength(content)))	return false;
		
		// we use lexical value as a value in value space for uriReference.
		// so we don't need to call convertValue method here.
		if( enumeration!=null && !enumeration.verify(content) )	return false;
		
		try
		{// make sure it conforms [RFC2396] (amended by [RFC2732])
			// parser generated by javacc reads a byte sequence, not a character sequence.
			// thus we have to somehow convert a character sequence to a byte sequence.
			
			// currently, URI only accepts US-ASCII characters (#x0-#x7F)
			// (note that this is a priority-feedback item of current draft, so
			// possibility of change is very high)
			
			// By using UTF-8, non ascii characters will have bit image of 1XXXXXXX.
			// thus these characters will be rejected by the parser as an error.
			final UriReferenceParser parser =
				new UriReferenceParser( new ByteArrayInputStream( content.getBytes("UTF-8") ) );
			parser.start();
		}
		catch( Exception e )
		{
			return false;
		}
		
		return true;
	}
	
	public DataTypeErrorDiagnosis diagnose( String content )
	{
		// TODO : implement this method
		return null;
	}
	
	public Object convertValue( String lexicalValue )
	{
		// we can't use java.net.URL (for example, it cannot handle IPv6.)
		// just for now, use lexical value
		return lexicalValue;
	}
	
	public DataType derive( String newName, Facets facets )
		throws BadTypeException
	{
		// no facets specified. So no need for derivation
		if( facets.isEmpty() )		return this;

		return new UriReferenceType( newName,
			LengthFacet.merge(this.lengths,facets),
			PatternFacet.merge(this.pattern,facets),
			EnumerationFacet.merge(this,this.enumeration,facets) );
	}
	
	private final LengthFacet lengths;
	private final PatternFacet pattern;
	private final EnumerationFacet enumeration;
	
	/**
	 * constructor for derived-type from uriReference by restriction.
	 * 
	 * To derive a datatype by restriction from uriReference, call derive method.
	 * This method is only accessible within this class.
	 */
	private UriReferenceType( String typeName, 
					    LengthFacet lengths, PatternFacet pattern,
						EnumerationFacet enumeration )
	{
		super( typeName );
		this.lengths	= lengths;
		this.pattern	= pattern;
		this.enumeration= enumeration;
	}
	
}
